模块搜索顺序
　　１．当前路径
　　２．sys.path
　　３.内建模块

模块的文档字符串
　　__doc__　属性

__name__属性
作用：
　　１．记录模块名
　　２．用来判断是否为主模块
__all__列表：
　　作用：
　　　　from ＊＊＊＊ import * 时，只导入__all__列表里的属性
隐藏属性：
　　指以'_'开头的属性是隐藏属性，在from ＊＊＊＊　import * 不被导入

包　package
  命名包：文件夹需要 __init__.py


day14 笔记

__init__.py文件
　　是常规包内必须存在的文件，__init__.py会在导入包时被自动调用
　　作用：
　　　　１．编写此包内容
　　　　２．在内部添加包的文档字符串
　　　　３．在__init__.py文件内可以加载包所依赖其他模块

示例见：
　　code/mypack/__init__.py


包的__all__列表
　　作用：
　　　　用来记录此包中有哪些子包或模块需要导入
　　　　当用from 包　import *　语句导入时，只查找__all__中的模块或子包
　　说明:
　　　　__all__列表只在from xxx import *语句时起作用

说明：
　　当子包或子包内的模块被导入时，上一层的包也会被先导入
　　例如：
　　import mypack.games.contra
    #实质会先导入mypack,再导入games,再导入contra

包的相对导入：
  包的相对导入是指包内的模块的相互导入

语法：
  from 相对路径包或模块　import 属性或模块名
  或
  from 相对路径包或模块　import ＊
相对路径：
  在from xxxx import 语句中，xxxx部分可以使用相对路径
  .代表当前目录
  ..代表上一级目录
  ...代表上二级目录
  ....以此类推
  注：
  　　１．相对导入时不能超出包的外部
  　　２．相对导入要避免循环导入

异常(基础)　exception
什么是错误?
  错误是指由于逻辑或语法等导致一个程序无法正常执行的问题

错误的特点：
　　有些错误无法预知


什么是异常：　　#非正常状态
　　异常是程序出错时标识的一种状态
　　当异常发生时，程序不会在向下执行，而转去调用此函数的地方待处理此错误并恢复为正常状态
异常的作用：
　　通知上层调用者有错误产生需要处理
　　用作信号

try语句的两种语法：
  try:
      可能触发异常的语句
  except 错误类型１ [as 变量１]：
      异常处理语句１
　　except 错误类型２　[as 变量２]
      异常处理语句２
　　except (错误类型３　错误类型４,...)
      异常处理语句３
  ...
  except:
      异常处理语句other
  else:
      未发生异常的语句
  finlly:
      最终语句
作用：
　　尝试捕获异常，将程序转为正常状态并继续执行

示例见：
　　try_except1.py

练习：
写一个函数　get_score()　来获取用户输入的学生成绩(0~100的整数)，如果输入出现错误，则此函数返回０，如果用户输入的书是０～１００之间的数，返回这个数


def get_score():
    ...


score = get_score()
print('学生的成绩是：',score)


try-except语句语法说明：
　　1.as 子句是用于绑定错误对象的变量，可以省略
　　2.except子句可以有一个或多个，但至少要有一个
　　3.else子句最多只能有一个，也可以省略
  4.finally子句最多只能有一个，也可以省略

try-finally语句
语法：
　　try:
      可能触发异常的语句
  finally:
      最终语句

语法说明：
　　finally 子句不可以省略
　　一定不存在except语句

作用：
　　　通常用try-finally 语句来做触发异常时必须要处理的事件，无论异常是否发生，finally　子句都会被执行

注：
　　try-finally　语句不会改变程序的(正常/异常)状态

错误类型的说明：

　　见python_base_docs_html/Python全部的异常类型_180407221959.html


raise 语句：
　　作用：
　　　　触发一个错误，让程序进入异常状态
　　语法：
　　　　raise 异常类型
　　　　或
　　　　raise 异常对象

示例见：
　　raise.py

assert　语句（断言语句）
　　语法：
　　　　　assert 真值表达式,错误数据(通常是指字符串)
　　作用：
　　　　　当真值表达式为False时,用错误数据创建一个AssertionError类型的错误，并进入异常状态
　　等同于：
　　　　　if 真值表达式　＝＝　False:
         raise AssertionError(数据错误)

示例建：
　　assert.py

为什么要用异常处理机制：
　　在程序调用层数较深时，向主调函数传递错误信息需要层层的return返回比较麻烦，所以用异常处理机制


示例：

def f1():
    print("开始盖房子打地基．．．")
    print("地基完工")

def f2():
    print("开始盖房子地面以上的部分")
    print("房子完工")

def f3():
    """第二承包商找人干活"""
　　　　f1()
    f2()

def build_house():
    f3()

buld_house()

练习：
　　１．一个球从100米高度落下，每次落地后反弹高度为原高度的一半，再落下，
　　　　１）写程序算出皮球从第10次落地后反弹高度是多少？
　　　　２）球共经过多少米路径？
　　２．打印九九乘法表：
　　　　　１＊１＝１
    　１＊２＝２　２＊２＝４
　　　　　１＊３＝３　２＊３＝６　３＊３＝９
　　　　　　．．．．．．
　　　　　１＊９＝９．．．．．．．．９＊９＝８１
　　３．分解质因数：
　　　　　输入一个正整数，分解质因数：
    　如输入：９０　＝　２＊３＊３＊５
    　(质因数是指最小能被原数整除的素数(不包含１))









